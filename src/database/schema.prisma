generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              Int           @id @default(autoincrement())
  walletAddress   String        @unique
  lastLoginAt     DateTime?
  createdAt       DateTime?     @default(now())
  updatedAt       DateTime?     @updatedAt
  deletedAt       DateTime?
  creator         User?         @relation("CreatorUsers", fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  creatorId       Int?
  createdUsers    User[]        @relation("CreatorUsers")
  roles           RoleUser[]
  airdropsJoined  AirdropUser[]
  airdropsCreated Airdrop[]

  @@index([walletAddress])
  @@index([creatorId])
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  desc      String?
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
  users     RoleUser[]
}

model RoleUser {
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  userId    Int
  roleId    Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

// todo: add payment method (feeTokenAddress and the amount
model Airdrop {
  creator            User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId          Int
  id                 Int           @id @default(autoincrement())
  name               String        @unique
  desc               String?
  merkleRoot         String?
  tokenTotal         String?
  tokenTotalHex      String?
  contractAddress    String?
  rewardTokenAddress String?
  startsAt           DateTime?
  expiresAt          DateTime?
  createdAt          DateTime?     @default(now())
  updatedAt          DateTime?     @updatedAt
  deletedAt          DateTime?
  recipients         AirdropUser[]

  @@index([creatorId])
}

model AirdropUser {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  airdrop     Airdrop   @relation(fields: [airdropId], references: [id], onDelete: Cascade)
  userId      Int
  airdropId   Int
  merkleIndex Int
  amount      String
  amountHex   String
  proof       Json
  claimedAt   DateTime?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  @@id([userId, airdropId])
  @@index([userId])
  @@index([airdropId])
}
